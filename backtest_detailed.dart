import 'package:bybit_scalping_bot/models/market_condition.dart';
import 'package:bybit_scalping_bot/services/market_analyzer.dart';
import 'package:bybit_scalping_bot/services/adaptive_strategy.dart';

// Backtest ETH with detailed trade log
void main() {
  print('🚀 ETH Backtesting - Detailed Analysis');
  print('💰 Seed Money: \$1000 USDT');
  print('📅 Period: 2025-10-19 12:00 UTC ~ 2025-10-20 04:35 UTC (200 candles, 5min)');
  print('=' * 80);

  // ETH 5min candle data (UTC 2025-10-19 12:00 ~ 2025-10-20 04:35)
  // Format: [open, high, low, close, volume]
  final rawCandles = [
    [3922.66, 3928.96, 3919.24, 3924.4, 5253.0],
    [3924.4, 3929.2, 3919.63, 3921.29, 4942.54],
    [3921.29, 3921.47, 3914.0, 3916.39, 2678.2],
    [3916.39, 3920.83, 3913.12, 3918.81, 2402.57],
    [3918.81, 3919.12, 3910.0, 3915.08, 4752.64],
    [3915.08, 3915.4, 3910.28, 3912.79, 2345.7],
    [3912.79, 3918.03, 3903.56, 3911.57, 6077.81],
    [3911.57, 3921.81, 3910.2, 3918.16, 3664.28],
    [3918.16, 3921.59, 3912.65, 3914.05, 4078.18],
    [3914.05, 3918.56, 3910.28, 3918.17, 1721.02],
    [3918.17, 3920.61, 3916.0, 3920.08, 1193.76],
    [3920.08, 3922.99, 3918.51, 3921.93, 1238.72],
    [3921.93, 3924.93, 3916.56, 3924.54, 2273.77],
    [3924.54, 3925.0, 3915.0, 3915.38, 2270.28],
    [3915.38, 3917.39, 3912.1, 3916.02, 1726.76],
    [3916.02, 3918.75, 3913.57, 3915.32, 783.52],
    [3915.32, 3921.65, 3915.24, 3919.52, 1173.71],
    [3919.52, 3924.88, 3918.05, 3924.19, 3674.59],
    [3924.19, 3938.75, 3923.58, 3935.26, 9416.9],
    [3935.26, 3944.7, 3934.33, 3942.08, 5181.9],
    [3942.08, 3948.95, 3940.64, 3944.63, 5309.09],
    [3944.63, 3956.95, 3942.13, 3952.17, 7316.32],
    [3952.17, 3972.25, 3949.19, 3963.47, 17715.7],
    [3963.47, 3989.14, 3960.03, 3970.87, 17944.24],
    [3970.87, 3972.51, 3955.25, 3959.37, 7216.19],
    [3959.37, 3964.88, 3953.0, 3963.17, 5737.88],
    [3963.17, 3972.07, 3962.86, 3966.57, 5721.12],
    [3966.57, 3992.72, 3961.77, 3991.88, 10404.54],
    [3991.88, 4001.55, 3982.69, 3986.22, 18631.37],
    [3986.22, 3996.06, 3982.19, 3989.84, 7852.78],
    [3989.84, 3995.5, 3980.0, 3983.5, 8305.42],
    [3983.5, 3990.31, 3969.04, 3973.73, 10827.93],
    [3973.73, 3982.81, 3972.96, 3980.8, 4653.45],
    [3980.8, 3984.57, 3977.51, 3982.63, 2810.8],
    [3982.63, 3990.6, 3980.41, 3989.6, 3117.26],
    [3989.6, 3990.34, 3985.46, 3987.67, 1844.68],
    [3987.67, 3991.36, 3982.2, 3987.37, 7521.31],
    [3987.37, 3988.31, 3978.27, 3980.41, 3598.3],
    [3980.41, 3980.41, 3975.19, 3980.0, 2693.75],
    [3980.0, 3980.39, 3975.17, 3978.68, 1715.15],
    [3978.68, 3988.48, 3978.39, 3980.15, 2548.74],
    [3980.15, 3984.78, 3974.78, 3980.07, 6508.27],
    [3980.07, 3981.37, 3974.58, 3976.08, 4650.74],
    [3976.08, 3979.82, 3973.12, 3975.59, 1527.88],
    [3975.59, 3976.14, 3971.22, 3973.39, 1696.68],
    [3973.39, 3980.0, 3973.39, 3979.6, 717.13],
    [3979.6, 3980.0, 3975.47, 3977.38, 1349.53],
    [3977.38, 3978.4, 3973.48, 3977.78, 1808.46],
    [3977.78, 3978.8, 3971.62, 3973.63, 1688.42],
    [3973.63, 3973.65, 3965.78, 3969.27, 4233.94],
    [3969.27, 3972.77, 3967.0, 3968.68, 1163.16],
    [3968.68, 3971.36, 3967.39, 3968.33, 1012.29],
    [3968.33, 3971.39, 3960.0, 3969.75, 5543.0],
    [3969.75, 3971.36, 3965.91, 3967.39, 1901.61],
    [3967.39, 3967.39, 3962.68, 3966.27, 1397.75],
    [3966.27, 3966.28, 3956.13, 3965.85, 12045.32],
    [3965.85, 3986.55, 3965.63, 3983.65, 6819.18],
    [3983.65, 3985.55, 3976.0, 3984.64, 3332.43],
    [3984.64, 3987.65, 3980.62, 3983.68, 2007.11],
    [3983.68, 3985.29, 3978.46, 3979.79, 1792.67],
    [3979.79, 4003.61, 3979.21, 3999.02, 14630.57],
    [3999.02, 4023.0, 3993.03, 4017.8, 22712.04],
    [4017.8, 4026.15, 4008.35, 4010.22, 10456.53],
    [4010.22, 4016.0, 4004.13, 4006.99, 7861.21],
    [4006.99, 4008.69, 3994.36, 3999.1, 7751.99],
    [3999.1, 4001.18, 3985.91, 3987.81, 9060.58],
    [3987.81, 3994.63, 3985.11, 3993.39, 3943.79],
    [3993.39, 3993.39, 3986.56, 3987.27, 2069.2],
    [3987.27, 3989.49, 3984.21, 3988.52, 3068.4],
    [3988.52, 3989.47, 3982.23, 3984.67, 3176.14],
    [3984.67, 3994.18, 3982.3, 3991.6, 3316.48],
    [3991.6, 3992.99, 3988.0, 3991.6, 987.23],
    [3991.6, 4005.86, 3990.87, 3993.54, 9738.78],
    [3993.54, 3997.26, 3987.94, 3988.55, 1276.85],
    [3988.55, 3991.28, 3986.34, 3990.64, 1982.38],
    [3990.64, 3991.81, 3982.8, 3986.26, 2124.23],
    [3986.26, 3996.15, 3983.98, 3993.23, 3747.5],
    [3993.23, 3995.0, 3991.52, 3992.09, 1129.67],
    [3992.09, 3998.82, 3989.22, 3993.71, 2156.93],
    [3993.71, 3999.11, 3993.7, 3997.69, 1906.22],
    [3997.69, 4003.23, 3996.91, 3999.66, 2887.73],
    [3999.66, 4002.82, 3998.73, 4001.57, 1737.15],
    [4001.57, 4003.94, 3998.12, 4000.55, 1274.35],
    [4000.55, 4004.0, 3998.07, 3999.99, 1865.93],
    [3999.99, 4004.03, 3995.05, 3996.79, 4796.38],
    [3996.79, 3996.79, 3984.19, 3985.7, 5689.25],
    [3985.7, 3987.94, 3976.56, 3987.8, 5279.99],
    [3987.8, 3988.44, 3983.88, 3985.03, 655.83],
    [3985.03, 3986.72, 3983.69, 3986.08, 1369.61],
    [3986.08, 3989.96, 3984.89, 3989.96, 896.97],
    [3989.96, 3989.99, 3980.79, 3981.0, 2898.34],
    [3981.0, 3986.12, 3977.0, 3983.01, 2142.82],
    [3983.01, 3984.11, 3981.78, 3982.9, 776.82],
    [3982.9, 3982.9, 3976.73, 3981.88, 1296.58],
    [3981.88, 3986.07, 3981.86, 3984.72, 809.33],
    [3984.72, 3988.01, 3981.14, 3983.82, 2400.41],
    [3983.82, 3984.49, 3978.21, 3983.91, 1383.47],
    [3983.91, 3985.85, 3976.0, 3977.08, 4989.75],
    [3977.08, 3980.01, 3976.71, 3977.01, 941.93],
    [3977.01, 3979.0, 3971.36, 3974.75, 2321.96],
    [3974.75, 3979.4, 3974.75, 3978.37, 990.05],
    [3978.37, 3982.66, 3978.05, 3982.51, 692.32],
    [3982.51, 3984.0, 3978.01, 3982.77, 790.15],
    [3982.77, 3983.7, 3979.75, 3980.59, 830.32],
    [3980.59, 3983.7, 3980.59, 3981.97, 605.73],
    [3981.97, 3995.6, 3981.97, 3990.54, 3390.63],
    [3990.54, 3993.03, 3988.33, 3992.4, 2117.91],
    [3992.4, 4003.73, 3992.4, 3999.33, 9402.05],
    [3999.33, 4002.73, 3993.85, 4001.72, 3342.6],
    [4001.72, 4002.48, 3996.64, 3999.31, 1472.52],
    [3999.31, 4002.49, 3994.99, 4001.77, 5802.46],
    [4001.77, 4002.0, 3992.03, 3993.47, 1685.1],
    [3993.47, 3993.47, 3987.23, 3988.38, 1493.42],
    [3988.38, 3989.21, 3984.17, 3984.4, 955.75],
    [3984.4, 3987.33, 3982.79, 3986.77, 2961.61],
    [3986.77, 3991.51, 3985.99, 3990.72, 878.41],
    [3990.72, 3993.15, 3988.64, 3990.04, 602.8],
    [3990.04, 3993.41, 3987.48, 3987.68, 589.04],
    [3987.68, 3994.53, 3986.67, 3988.0, 923.11],
    [3988.0, 3997.61, 3987.06, 3995.98, 1667.12],
    [3995.98, 4003.45, 3986.79, 3995.75, 4699.04],
    [3995.75, 4003.21, 3991.59, 4002.34, 2309.14],
    [4002.34, 4009.96, 4000.0, 4003.0, 6208.23],
    [4003.0, 4016.19, 4000.75, 4013.96, 5277.6],
    [4013.96, 4014.23, 4005.98, 4010.47, 3382.65],
    [4010.47, 4019.06, 4007.86, 4014.4, 4349.66],
    [4014.4, 4019.37, 4008.75, 4013.59, 3145.17],
    [4013.59, 4021.28, 4012.54, 4018.32, 4443.9],
    [4018.32, 4023.36, 4017.74, 4022.08, 3528.01],
    [4022.08, 4025.96, 4017.61, 4023.23, 6270.38],
    [4023.23, 4031.62, 4017.57, 4020.19, 5613.94],
    [4020.19, 4021.72, 4017.39, 4019.23, 1807.13],
    [4019.23, 4019.23, 4002.73, 4009.05, 9169.43],
    [4009.05, 4009.25, 4001.26, 4004.45, 2631.85],
    [4004.45, 4006.62, 3996.9, 4000.85, 10788.24],
    [4000.85, 4000.9, 3996.01, 3997.67, 2587.96],
    [3997.67, 3997.72, 3993.01, 3994.16, 2002.19],
    [3994.16, 3994.57, 3990.21, 3992.41, 1696.91],
    [3992.41, 3995.93, 3985.73, 3989.35, 2233.32],
    [3989.35, 3989.35, 3975.73, 3982.17, 7851.3],
    [3982.17, 3982.76, 3967.17, 3974.32, 17415.78],
    [3974.32, 3978.45, 3972.55, 3976.56, 4403.7],
    [3976.56, 3986.17, 3976.39, 3983.86, 4338.17],
    [3983.86, 3984.06, 3978.05, 3980.97, 1625.38],
    [3980.97, 3981.08, 3966.0, 3968.2, 7753.43],
    [3968.2, 3971.47, 3961.96, 3962.18, 7856.21],
    [3962.18, 3965.6, 3952.6, 3954.79, 8678.72],
    [3954.79, 3958.72, 3945.24, 3946.0, 21777.79],
    [3946.0, 3951.0, 3922.02, 3928.45, 33412.68],
    [3928.45, 3931.19, 3918.07, 3923.6, 10473.74],
    [3923.6, 3924.1, 3906.5, 3915.51, 13631.23],
    [3915.51, 3926.91, 3914.71, 3925.44, 11507.32],
    [3925.44, 3940.61, 3924.34, 3931.02, 9564.42],
    [3931.02, 3940.88, 3925.97, 3935.09, 6183.5],
    [3935.09, 3937.67, 3926.43, 3933.57, 9128.66],
    [3933.57, 3943.97, 3933.57, 3939.77, 4198.84],
    [3939.77, 3950.81, 3935.31, 3936.4, 7569.95],
    [3936.4, 3938.99, 3927.86, 3938.91, 3336.53],
    [3938.91, 3948.99, 3938.4, 3941.21, 4034.28],
    [3941.21, 3947.58, 3937.26, 3943.61, 2075.38],
    [3943.61, 3946.71, 3938.27, 3940.41, 6829.41],
    [3940.41, 3952.4, 3938.11, 3945.35, 4088.17],
    [3945.35, 3948.98, 3937.55, 3938.21, 3458.15],
    [3938.21, 3943.68, 3935.0, 3935.48, 2178.65],
    [3935.48, 3943.62, 3932.59, 3941.77, 2662.02],
    [3941.77, 3946.54, 3934.49, 3945.25, 2468.67],
    [3945.25, 3948.53, 3936.24, 3942.9, 1978.03],
    [3942.9, 3943.33, 3935.06, 3935.86, 2045.55],
    [3935.86, 3935.86, 3927.87, 3931.95, 3224.25],
    [3931.95, 3931.96, 3920.01, 3922.38, 5914.13],
    [3922.38, 3931.07, 3916.41, 3926.21, 4546.72],
    [3926.21, 3949.06, 3923.4, 3939.37, 5931.48],
    [3939.37, 3947.52, 3938.14, 3943.54, 1937.37],
    [3943.54, 3945.59, 3942.3, 3944.21, 1003.28],
    [3944.21, 3944.93, 3939.36, 3944.43, 1805.45],
    [3944.43, 3962.58, 3944.42, 3957.14, 11147.05],
    [3957.14, 3962.02, 3953.74, 3956.07, 4245.22],
    [3956.07, 3961.85, 3952.0, 3954.41, 3490.21],
    [3954.41, 3964.82, 3951.54, 3952.9, 5582.95],
    [3952.9, 3956.18, 3948.6, 3954.16, 2250.86],
    [3954.16, 3955.16, 3949.07, 3950.79, 892.1],
    [3950.79, 3955.16, 3949.07, 3954.24, 3476.52],
    [3954.24, 3954.52, 3946.11, 3946.39, 818.09],
    [3946.39, 3967.14, 3952.4, 3963.48, 3318.37],
    [3963.48, 3963.5, 3955.9, 3956.28, 1480.64],
    [3956.28, 3959.89, 3953.11, 3959.89, 1082.83],
    [3959.89, 3962.58, 3952.29, 3953.61, 2168.22],
    [3953.61, 3963.0, 3953.46, 3962.0, 1464.8],
    [3962.0, 3985.73, 3961.39, 3977.42, 14609.64],
    [3977.42, 3994.59, 3973.0, 3993.71, 11730.73],
    [3993.71, 4039.25, 3993.7, 4026.16, 33460.32],
    [4026.16, 4032.28, 4017.83, 4025.37, 9189.05],
    [4025.37, 4038.62, 4025.37, 4036.61, 9310.35],
    [4036.61, 4046.94, 4026.55, 4028.4, 12948.5],
    [4028.4, 4034.39, 4023.0, 4033.01, 4576.65],
    [4033.01, 4037.45, 4022.86, 4025.07, 4492.66],
    [4025.07, 4028.72, 4020.69, 4025.87, 4436.73],
    [4025.87, 4032.97, 4024.11, 4029.19, 2874.41],
    [4029.19, 4045.4, 4029.19, 4033.88, 7392.91],
    [4033.88, 4042.8, 4033.61, 4038.18, 4229.96],
  ];

  // Convert to typed data
  final candles = rawCandles.map((c) => c.map((n) => n.toDouble()).toList()).toList();

  // Trading simulation
  double balance = 1000.0;
  final List<String> tradeLog = [];

  // Position tracking
  double? entryPrice;
  String? positionSide; // 'long' or 'short'
  int? entryIndex;
  double? takeProfitPrice;
  double? stopLossPrice;
  MarketCondition? entryCondition;
  String? entryReason;

  // Build close price history
  final List<double> closePrices = [];
  final List<double> volumes = [];

  for (int i = 0; i < candles.length; i++) {
    final candle = candles[i];
    final close = candle[3];
    final volume = candle[4];

    closePrices.add(close);
    volumes.add(volume);

    // Skip first 30 candles (need history for indicators)
    if (i < 30) continue;

    // Check TP/SL if position is open
    if (entryPrice != null && positionSide != null) {
      final high = candle[1];
      final low = candle[2];

      bool tpHit = false;
      bool slHit = false;

      if (positionSide == 'long') {
        tpHit = high >= takeProfitPrice!;
        slHit = low <= stopLossPrice!;
      } else {
        tpHit = low <= takeProfitPrice!;
        slHit = high >= stopLossPrice!;
      }

      if (tpHit || slHit) {
        final exitPrice = tpHit ? takeProfitPrice! : stopLossPrice!;
        final pnl = positionSide == 'long'
            ? (exitPrice - entryPrice!) / entryPrice! * balance
            : (entryPrice! - exitPrice) / entryPrice! * balance;
        balance += pnl;

        final pnlPercent = (pnl / balance * 100).toStringAsFixed(2);
        final timestamp = '2025-10-19 12:00:00 UTC + ${i * 5}분';

        print('');
        print('[$i] CLOSE $positionSide @ \$${exitPrice.toStringAsFixed(2)} (${tpHit ? "TP" : "SL"})');
        print('    Time: $timestamp');
        print('    Entry: \$${entryPrice!.toStringAsFixed(2)} → Exit: \$${exitPrice.toStringAsFixed(2)}');
        print('    PnL: \$${pnl.toStringAsFixed(2)} (${pnlPercent}%)');
        print('    Balance: \$${balance.toStringAsFixed(2)}');

        tradeLog.add('[$i] CLOSE $positionSide @ \$${exitPrice.toStringAsFixed(2)} (${tpHit ? "TP" : "SL"}) | PnL: \$${pnl.toStringAsFixed(2)} ($pnlPercent%) | Balance: \$${balance.toStringAsFixed(2)}');

        // Clear position
        entryPrice = null;
        positionSide = null;
        entryIndex = null;
        takeProfitPrice = null;
        stopLossPrice = null;
        entryCondition = null;
        entryReason = null;
      }
    }

    // If no position, check for entry signals
    if (entryPrice == null) {
      // Analyze market
      final analysisResult = MarketAnalyzer.analyzeMarket(
        closePrices: closePrices,
        volumes: volumes,
      );

      final condition = analysisResult['condition'] as MarketCondition;

      // Get trading signal
      final signal = AdaptiveStrategy.analyzeSignal(
        condition: condition,
        closePrices: closePrices,
        volumes: volumes,
        currentPrice: close,
      );

      // Open position if signal detected
      if (signal.hasSignal) {
        entryPrice = close;
        positionSide = signal.type == SignalType.long ? 'long' : 'short';
        entryIndex = i;
        takeProfitPrice = signal.takeProfitPrice;
        stopLossPrice = signal.stopLossPrice;
        entryCondition = condition;
        entryReason = signal.reasoning;

        final timestamp = '2025-10-19 12:00:00 UTC + ${i * 5}분';

        print('');
        print('[$i] OPEN $positionSide @ \$${close.toStringAsFixed(2)}');
        print('    Time: $timestamp');
        print('    Condition: ${condition.toString().split('.').last}');
        print('    Signal: $entryReason');
        print('    TP: \$${takeProfitPrice!.toStringAsFixed(2)} | SL: \$${stopLossPrice!.toStringAsFixed(2)}');

        tradeLog.add('[$i] OPEN $positionSide @ \$${close.toStringAsFixed(2)} | $timestamp | ${condition.toString().split('.').last} | $entryReason');
      }
    }
  }

  // Close any remaining position at market price
  if (entryPrice != null && positionSide != null) {
    final exitPrice = closePrices.last;
    final pnl = positionSide == 'long'
        ? (exitPrice - entryPrice!) / entryPrice! * balance
        : (entryPrice! - exitPrice) / entryPrice! * balance;
    balance += pnl;

    print('');
    print('[END] CLOSE $positionSide @ \$${exitPrice.toStringAsFixed(2)} (Market)');
    print('      PnL: \$${pnl.toStringAsFixed(2)}');
    print('      Balance: \$${balance.toStringAsFixed(2)}');

    tradeLog.add('[END] CLOSE $positionSide @ \$${exitPrice.toStringAsFixed(2)} (Market) | PnL: \$${pnl.toStringAsFixed(2)} | Balance: \$${balance.toStringAsFixed(2)}');
  }

  // Final summary
  print('');
  print('=' * 80);
  print('📊 FINAL RESULTS');
  print('=' * 80);
  print('💵 Starting Balance: \$1000.00');
  print('💵 Ending Balance: \$${balance.toStringAsFixed(2)}');
  print('💰 Total P/L: \$${(balance - 1000).toStringAsFixed(2)} (${((balance - 1000) / 1000 * 100).toStringAsFixed(2)}%)');
  print('');
  print('📝 Total Trades: ${tradeLog.length}');
  print('');
  print('✅ Backtesting Complete!');
}
