{
  "permissions": {
    "allow": [
      "Bash(sqlite3 \"/Users/xeroman.k/Library/Developer/CoreSimulator/Devices/0B6F8508-D54F-4D6D-A9ED-D65AA0DD5FD3/data/Containers/Data/Application/73FFC540-CB14-43B3-B46E-8E6168E923CC/Documents/trading.db\" \"SELECT datetime(timestamp/1000, ''unixepoch'', ''localtime'') as time, type, message FROM trade_logs WHERE symbol=''ETHUSDT'' ORDER BY timestamp DESC LIMIT 100;\")",
      "Bash(sqlite3 \"/Users/xeroman.k/Library/Developer/CoreSimulator/Devices/0B6F8508-D54F-4D6D-A9ED-D65AA0DD5FD3/data/Containers/Data/Application/73FFC540-CB14-43B3-B46E-8E6168E923CC/Documents/trading.db\" \"SELECT datetime(timestamp/1000, ''unixepoch'', ''localtime'') as time, type, message FROM trade_logs WHERE symbol=''ETHUSDT'' AND (message LIKE ''%signal%'' OR message LIKE ''%Entry%'' OR message LIKE ''%Creating%'' OR message LIKE ''%Bollinger%'' OR message LIKE ''%RSI%'') ORDER BY timestamp DESC LIMIT 30;\")",
      "Bash(sqlite3 \"/Users/xeroman.k/Library/Developer/CoreSimulator/Devices/0B6F8508-D54F-4D6D-A9ED-D65AA0DD5FD3/data/Containers/Data/Application/73FFC540-CB14-43B3-B46E-8E6168E923CC/Documents/trading.db\" \"SELECT datetime(timestamp/1000, ''unixepoch'', ''localtime'') as time, type, message FROM trade_logs WHERE symbol=''ETHUSDT'' AND timestamp < 1729309834000 AND timestamp > 1729309200000 ORDER BY timestamp DESC LIMIT 50;\")",
      "Bash(sqlite3 \"/Users/xeroman.k/Library/Developer/CoreSimulator/Devices/0B6F8508-D54F-4D6D-A9ED-D65AA0DD5FD3/data/Containers/Data/Application/73FFC540-CB14-43B3-B46E-8E6168E923CC/Documents/trading.db\" \"SELECT datetime(timestamp/1000, ''unixepoch'', ''localtime'') as time, type, message FROM trade_logs WHERE type=''success'' OR message LIKE ''%Creating%'' OR message LIKE ''%leverage%'' ORDER BY timestamp DESC LIMIT 30;\")",
      "Bash(sqlite3 \"/Users/xeroman.k/Library/Developer/CoreSimulator/Devices/0B6F8508-D54F-4D6D-A9ED-D65AA0DD5FD3/data/Containers/Data/Application/73FFC540-CB14-43B3-B46E-8E6168E923CC/Documents/trading.db\" \"SELECT \n  datetime(timestamp/1000, ''unixepoch'', ''localtime'') as time,\n  side,\n  entry_price,\n  tp_price,\n  sl_price,\n  signal_strength,\n  rsi6,\n  rsi14,\n  bollinger_upper,\n  bollinger_middle,\n  bollinger_lower,\n  (entry_price - bollinger_lower) as distance_from_lower,\n  volume,\n  volume_ma5\nFROM order_history \nORDER BY timestamp DESC \nLIMIT 3;\")",
      "Read(//Users/xeroman.k/.claude/**)",
      "mcp__bybit__get_bybit_chart",
      "mcp__bybit__get_bybit_rsi",
      "Bash(python3 run_comprehensive_analysis.py)",
      "Bash(flutter analyze)",
      "WebFetch(domain:docs.coinone.co.kr)",
      "Bash(flutter pub get)",
      "Bash(flutter build ios --debug --no-codesign)",
      "Bash(flutter test test/coinone_models_test.dart)",
      "Bash(flutter test test/database_migration_test.dart)",
      "Bash(flutter clean)",
      "Read(//private/tmp/**)",
      "Bash(dart run test_coinone_live.dart)",
      "Bash(curl -s \"https://api.coinone.co.kr/public/v2/chart/KRW/BTC?interval=1h\")",
      "Bash(python3 test_coinone_python.py)",
      "Bash(curl -s 'https://api.coinone.co.kr/public/v2/ticker_utc_new/KRW?additional_data=true')",
      "Bash(curl -s 'https://api.coinone.co.kr/public/v2/ticker_utc_new/KRW/BTC')",
      "Bash(python3 -m json.tool)",
      "Bash(timeout 20 flutter run --debug)",
      "Bash(tee /tmp/flutter_debug.log)",
      "Read(//tmp/**)",
      "Bash(flutter analyze lib/screens/coinone_trading_screen.dart)",
      "Bash(pkill -f \"flutter run\")",
      "Bash(timeout 30 flutter run --debug)",
      "Bash(timeout 40 flutter run --debug)",
      "Bash(tee /tmp/ws_debug.log)",
      "Bash(flutter analyze lib/screens/coinone_trading_screen.dart lib/providers/coinone_trading_provider.dart)",
      "Bash(tee /tmp/coinone_debug.log)",
      "Bash(flutter analyze lib/services/coinone/coinone_api_client.dart lib/models/coinone/coinone_order.dart)",
      "Bash(timeout 35 flutter run --debug)",
      "Bash(flutter analyze lib/screens/coinone_trading_screen.dart lib/services/coinone/coinone_api_client.dart)",
      "Bash(flutter analyze lib/services/coinone/coinone_api_client.dart)",
      "Bash(flutter analyze lib/screens/coinone_withdrawal_screen.dart)",
      "Bash(python3 coinone_xrp_backtest.py)",
      "Bash(pip3 install requests pandas numpy)",
      "Bash(pip3 install --user requests pandas numpy)",
      "Bash(python3 -m pip install --break-system-packages requests pandas numpy)",
      "Bash(curl -s 'https://api.coinone.co.kr/public/v2/chart/KRW/XRP?interval=5m')",
      "Bash(tee coinone_backtest.log)",
      "Bash(cat coinone_xrp_backtest_results.json)",
      "Bash(python3 -c \"\nimport json\nimport sys\ndata = json.load(sys.stdin)\nprint(''''=== Combined Strategy (Uptrend Filter) Trades ==='''')\nfor trade in data[''''trades''''][''''combined'''']:\n    print(f\"\"{trade[''''timestamp'''']} | {trade[''''type'''']:4} | Price: {trade.get(''''price'''', 0):7.2f} | {''''Signal: '''' + trade.get(''''signal'''', trade.get(''''exit_reason'''', '''''''')) if ''''signal'''' in trade or ''''exit_reason'''' in trade else ''''''''}\"\")\n    if ''''ema50'''' in trade:\n        print(f\"\"   EMA50: {trade[''''ema50'''']:.2f}, EMA200: {trade[''''ema200'''']:.2f}, RSI: {trade.get(''''rsi'''', 0):.2f}\"\")\n    if ''''profit'''' in trade:\n        print(f\"\"   Profit: {trade[''''profit'''']:.2f} KRW\"\")\n\")",
      "Bash(flutter analyze lib/models/coinone/technical_indicators.dart lib/services/coinone/technical_indicator_calculator.dart lib/providers/coinone_trading_provider.dart)",
      "Bash(flutter analyze lib/providers/coinone_trading_provider.dart)",
      "Bash(flutter analyze lib/models/coinone/technical_indicators.dart lib/services/coinone/technical_indicator_calculator.dart lib/providers/coinone_trading_provider.dart lib/screens/coinone_trading_screen.dart)",
      "Bash(flutter analyze lib/providers/coinone_trading_provider.dart lib/screens/coinone_trading_screen.dart)",
      "Bash(flutter analyze lib/models/coinone/coinone_order.dart lib/repositories/coinone_repository.dart lib/providers/coinone_trading_provider.dart)",
      "Bash(flutter analyze lib/providers/coinone_trading_provider.dart lib/services/coinone/market_trend_detector.dart lib/services/coinone/volatility_calculator.dart lib/services/coinone/strategies/uptrend_strategy.dart lib/services/coinone/strategies/sideways_strategy.dart lib/models/coinone/trading_signal.dart)",
      "Bash(flutter analyze lib/models/coinone/technical_indicators.dart lib/services/coinone/technical_indicator_calculator.dart lib/services/coinone/strategies/uptrend_strategy.dart lib/services/coinone/strategies/sideways_strategy.dart)",
      "Bash(python3 coinone_strategy_backtest.py)",
      "Bash(tee /tmp/backtest_500.log)",
      "Bash(flutter analyze lib/models/coinone/trading_signal.dart lib/services/coinone/strategies/uptrend_strategy.dart lib/services/coinone/strategies/sideways_strategy.dart lib/providers/coinone_trading_provider.dart)",
      "Bash(python3 -c \"\nimport requests\n\n# Fetch latest data\nresponse = requests.get(''https://api.coinone.co.kr/public/v2/chart/KRW/XRP?interval=5m&size=500'')\ndata = response.json()\n\nif data.get(''result'') == ''success'':\n    candles = data[''chart'']\n    closes = [float(c[''close'']) for c in candles]\n    \n    # Calculate RSI\n    gains = []\n    losses = []\n    for i in range(1, len(closes)):\n        change = closes[i] - closes[i-1]\n        gains.append(max(0, change))\n        losses.append(max(0, -change))\n    \n    period = 14\n    avg_gain = sum(gains[-period:]) / period\n    avg_loss = sum(losses[-period:]) / period\n    rs = avg_gain / avg_loss if avg_loss > 0 else 100\n    rsi = 100 - (100 / (1 + rs))\n    \n    # Count RSI values\n    print(f''Current RSI: {rsi:.1f}'')\n    print(f''RSI ≤ 30: {sum(1 for c in closes[-200:] if True)} (need to calc)'')\n    \n    # Simple count by recalculating for each point\n    count_30 = 0\n    count_35 = 0\n    count_40 = 0\n    \n    for i in range(14, len(closes)):\n        gains_i = []\n        losses_i = []\n        for j in range(1, i+1):\n            change = closes[j] - closes[j-1]\n            gains_i.append(max(0, change))\n            losses_i.append(max(0, -change))\n        \n        avg_gain_i = sum(gains_i[-14:]) / 14\n        avg_loss_i = sum(losses_i[-14:]) / 14\n        rs_i = avg_gain_i / avg_loss_i if avg_loss_i > 0 else 100\n        rsi_i = 100 - (100 / (1 + rs_i))\n        \n        if rsi_i <= 30:\n            count_30 += 1\n        if rsi_i <= 35:\n            count_35 += 1\n        if rsi_i <= 40:\n            count_40 += 1\n    \n    total = len(closes) - 14\n    print(f''\\nOut of {total} candles:'')\n    print(f''RSI ≤ 30: {count_30} ({count_30/total*100:.1f}%)'')\n    print(f''RSI ≤ 35: {count_35} ({count_35/total*100:.1f}%)'')\n    print(f''RSI ≤ 40: {count_40} ({count_40/total*100:.1f}%)'')\n\")"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true
}
